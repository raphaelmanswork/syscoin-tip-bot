generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("PLANETSCALE_PRISMA_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Wallet {
  userId     BigInt  @unique
  firstname  String  @default("")
  username   String? @unique
  address    String  @unique
  privateKey String  @unique
}

model Chat {
  chatId BigInt @unique
  userId BigInt @unique
}

model GroupChat {
  chatId          BigInt            @id
  title           String
  createAt        DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  GroupChatMember GroupChatMember[]
}

model GroupChatMember {
  userId              BigInt
  username            String?
  groupChat           GroupChat             @relation(fields: [groupChatId], references: [chatId], onDelete: NoAction, onUpdate: NoAction)
  groupChatId         BigInt
  ActiveAirdropMember ActiveAirdropMember[]

  @@id([userId, groupChatId])
}

model ActiveAirdropMember {
  messageId       BigInt
  groupChatId     BigInt
  userId          BigInt
  activeAirdrop   ActiveAirdrop   @relation(fields: [messageId], references: [messageId], onUpdate: NoAction)
  groupChatMember GroupChatMember @relation(fields: [groupChatId, userId], references: [groupChatId, userId], onUpdate: NoAction)

  @@id([messageId, userId])
}

model ActiveAirdrop {
  messageId           BigInt                @unique
  chatId              BigInt
  ActiveAirdropMember ActiveAirdropMember[]
  amount              Float
  count               Int
}

model Admin {
  name                        String
  address                     String                       @id @unique
  status                      String                       @default("active")
  withdrawalRequestSignatures WithdrawalRequestSignature[]
  initiatedRequests           WithdrawalRequest[]
}

model WithdrawalRequest {
  id          Int                          @id @default(autoincrement())
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  amount      String
  reason      String
  initiatedBy String
  initiator   Admin                        @relation(fields: [initiatedBy], references: [address])
  status      String                       @default("active")
  signatures  WithdrawalRequestSignature[]
}

model WithdrawalRequestSignature {
  requestId Int
  signature String            @id @unique
  address   String
  admin     Admin             @relation(fields: [address], references: [address])
  request   WithdrawalRequest @relation(fields: [requestId], references: [id])
}
